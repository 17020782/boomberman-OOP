package Object;import Effect.Animation;import Effect.CacheDataLoader;import Interface.GamePanel;import Map.Manager;import javax.imageio.ImageIO;import java.awt.*;import java.awt.event.KeyEvent;import java.awt.image.BufferedImage;import java.io.File;import java.io.IOException;import java.security.Key;public class BomberMan {    public static final int DIR_LEFT = -2;    public static final int DIR_RIGHT = 2;    public static final int DIR_UP = -1;    public static final int DIR_DOWN = 1;    private boolean isStanding;    private boolean isRunning;    private Animation standFond, standRight, standLeft, standBehind, runRight;    private Animation runLeft, runFrond, runBehind;    private int direction;    private int posX;    private int posY;    private int width;    private int height;    //private BufferedImage imageactor;    private int speedUpDown, speedRightLef;    public GamePanel gamePanel;    public Manager manager;    public BomberMan(int posX, int posY, int width, int height, int speedUpDown, int speedRightLef) {        this.posX = posX;        this.posY = posY;        this.width = width;        this.height = height;        this.speedUpDown = speedUpDown;        this.speedRightLef = speedRightLef;        this.isStanding = true;        this.isRunning = false;        this.direction = DIR_DOWN;        standFond = CacheDataLoader.getInstance().getAnimation("standfront");        standBehind = CacheDataLoader.getInstance().getAnimation("standlbehind");        standLeft = CacheDataLoader.getInstance().getAnimation("standleft");        standRight = CacheDataLoader.getInstance().getAnimation("standright");        runFrond = CacheDataLoader.getInstance().getAnimation("runfrond");        runBehind = CacheDataLoader.getInstance().getAnimation("runbehind");        runLeft = CacheDataLoader.getInstance().getAnimation("runleft");        runRight = CacheDataLoader.getInstance().getAnimation("runright");    }    /**     * hàm draw nhân vật     * @param g2     */    public void draw(Graphics2D g2){        if(isRunning) {            if(speedRightLef > 0 ) {                runRight.Update(System.nanoTime());                runRight.draw(getPosX(),getPosY(),g2);            }            if(speedRightLef < 0 ) {                runLeft.Update(System.nanoTime());                runLeft.draw(getPosX(),getPosY(),g2);            }            if(speedUpDown < 0 ) {                runBehind.Update(System.nanoTime());                runBehind.draw(getPosX(),getPosY(),g2);            }            if(speedUpDown > 0 ) {                runFrond.Update(System.nanoTime());                runFrond.draw(getPosX(),getPosY(),g2);            }        }        else        if(isStanding){            switch (direction) {                case DIR_RIGHT:                    standRight.Update(System.nanoTime());                    standRight.draw(getPosX(),getPosY(),g2);                    break;                case DIR_LEFT:                    standLeft.Update(System.nanoTime());                    standLeft.draw(getPosX(),getPosY(),g2);                    break;                case DIR_UP:                    standBehind.Update(System.nanoTime());                    standBehind.draw(getPosX(),getPosY(),g2);                    break;                case DIR_DOWN:                    standFond.Update(System.nanoTime());                    standFond.draw(getPosX(),getPosY(),g2);                    break;            }        }        //g2.setColor(Color.YELLOW);        //g2.fillRect((int) posX, (int) posY, (int) width, (int) height);    }    /**     * upadte nhân vật     */    public void update(){        setPosX( (getPosX()+getSpeedRightLef()));        setPosY(getPosY() + getSpeedUpDown());    }    /**     *  xử lí va chạm     */                public void Impaction(){        for(int i=0 ; i < manager.getArrBox().size() ;i++){            Rectangle rec1 = new Rectangle(manager.getArrBox().get(i).getX(),manager.getArrBox().get(i).getY(),                    manager.getArrBox().get(i).getWidth(),manager.getArrBox().get(i).getHeight());            Rectangle rec2 = new Rectangle((int) getPosX(), (int) getPosY(),(int) getWidth(),(int) getHeight());            Rectangle rec3 = new Rectangle();            if(rec1.intersects(rec2)){                rec1.intersect(rec1, rec2, rec3);                if(rec2.x > rec1.x && rec2.y < rec1.y && rec3.height >= 5){    // xử lí đi sang trái                    setPosX(rec2.x+manager.buff.getSpeed());                    //System.out.println(" xử lí đi sang trái: " + getPosX() + " " + getPosY());                    //setPosX(manager.getArrBox().get(i).getX() + 45);                    ;                }                if(rec2.x < rec1.x && rec2.y < rec1.y && rec3.height >= 5){    // xử lí đi sang phai                    //setPosX(manager.getArrBox().get(i).getX() - 45);                    setPosX(rec2.x-manager.buff.getSpeed());                    //System.out.println("xử lí đi sang phai");                }                if(      rec2.y < rec1.y && rec3.height >= 44 && rec3.width >= 5){    // xử lí đi lên trên                    //setPosY(rec2.y-1);                    //System.out.println("xử lí đi lên trên: " + + getPosX() + " " + getPosY());                    setPosY(manager.getArrBox().get(i).getY());                }                if (rec2.y < rec1.y && rec3.width >= 5 && rec3.height <= 5){                    setPosY(rec2.y-manager.buff.getSpeed());                    //setPosY(manager.getArrBox().get(i).getY() - rec2.height);                    //System.out.println(" xu li xuong duoi");                }            }        }        if(getPosX() <= 45){            // giới hạn tướng bên trái            setPosX(45);        }        if(getPosX() >= (720-getWidth())){  // giới hạn tường bên phải            setPosX(720-getWidth());        }        if(getPosY() <= (75-getHeight())){  // giới hạn tường bên trên            setPosY(75-getHeight());        }        if( getPosY() >= (630-getHeight())) // giới hạn tường phía dưới            setPosY(630-getHeight());    }    /**     * Hàm ăn Item     */    public void eatItem(){        for(int i=0 ; i < manager.getArrItem().size(); i++){            Rectangle rec1 = new Rectangle(manager.getArrItem().get(i).getX(),manager.getArrItem().get(i).getY(),                                           manager.getArrItem().get(i).getWidth(), manager.getArrItem().get(i).getHeight());            Rectangle rec2 = new Rectangle((int) getPosX(), (int) getPosY(),(int) getWidth(),(int) getHeight());            Rectangle rec3 = new Rectangle();            if (rec1.intersects(rec2)){                rec1.intersect(rec1, rec2, rec3);                if(rec3.height >= 30 && rec3 .width >= 30) {                    if (manager.getArrItem().get(i).getType() == 1) manager.buff.setBomb(manager.buff.getBomb() + 1);                    if (manager.getArrItem().get(i).getType() == 2) manager.buff.setSizeBom(manager.buff.getSizeBom() + 1);                    if (manager.getArrItem().get(i).getType() == 3) manager.buff.setSpeed(manager.buff.getSpeed() + 1);                    manager.getArrItem().remove(i);                    i--;                }            }        }    }    /**     * các hàm get set     * @return     */    public int getPosX() {        return posX;    }    public int getSpeedUpDown() {        return speedUpDown;    }    public void setSpeedUpDown(int speedUpDown) {        this.speedUpDown = speedUpDown;    }    public int getSpeedRightLef() {        return speedRightLef;    }    public void setSpeedRightLef(int speedRightLef) {        this.speedRightLef = speedRightLef;    }    public void setPosX(int posX) {        this.posX = posX;    }    public int getPosY() {        return posY;    }    public void setPosY(int posY) {        this.posY = posY;    }    public int getWidth() {        return width;    }    public void setWidth(int width) {        this.width = width;    }    public int getHeight() {        return height;    }    public void setHeight(int height) {        this.height = height;    }    public int getDirection() {        return direction;    }    public void setDirection(int direction) {        this.direction = direction;    }    public boolean isStanding() {        return isStanding;    }    public void setStanding(boolean standing) {        isStanding = standing;    }    public boolean isRunning() {        return isRunning;    }    public void setRunning(boolean running) {        isRunning = running;    }}